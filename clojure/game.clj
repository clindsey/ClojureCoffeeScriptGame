(ns physicsGame)
(def jquery (js* "$"))
; Box2d Imports: Generated by macro.clj
(def b2AABB js/Box2D.Collision.b2AABB)
(def b2BodyDef js/Box2D.Dynamics.b2BodyDef)
(def b2Body js/Box2D.Dynamics.b2Body)
(def b2FixtureDef js/Box2D.Dynamics.b2FixtureDef)
(def b2Fixture js/Box2D.Dynamics.b2Fixture)
(def b2World js/Box2D.Dynamics.b2World)
(def b2DebugDraw js/Box2D.Dynamics.b2DebugDraw)
(def b2PolygonShape js/Box2D.Collision.Shapes.b2PolygonShape)
(def b2CircleShape js/Box2D.Collision.Shapes.b2CircleShape)

(defn v [x y] (js/Box2D.Common.Math.b2Vec2. x y))
(defn dom [s] (->> (name s) (str "#") jquery))

; Using set! is really verbose, and doesn't accept anything other than bare symbols
(def nativejsset (js* "function (o, key ,val) {
   o[key] = val;
}"))

(defn native-set-wrapper [jsobject attr value]
  (nativejsset jsobject (name attr) value)
  )
(defn js-set
  "Sets an attribute name to a value on a javascript object
  Returns the original object"
  ([jsobject attr value]
    (do
      (native-set-wrapper jsobject attr value)
      jsobject
      )
    )
  ([jsobject & values]
    (do
      (doseq [[attr value] (apply hash-map values)]
        (native-set-wrapper jsobject attr value)
        )
      jsobject
      )
    )
  )

(def p js/puts)

;(defn alertall [& args]
;  (doseq [x args] (js/alert x)))
(def W)
(def H)
(def scale 30)

(defn get-canvas []
  (let [canvas (dom :canvas)]
    (def W (. canvas (width)))
    (def H (. canvas (height)))
    (.get canvas 0)
    )
  )

(defn create-game [canvas]
  (let [gravity (v 0 10)
        doSleep false
        twiceScale (* 2 scale)]
    {:center-x (/ W twiceScale)
     :center-y (/ H twiceScale)
     :world (b2World. gravity doSleep)
     :canvas canvas
     }
    ))

;  (set! (. f density) 3) is uly
(defn create-fixture
  ([shape] (js-set (b2FixtureDef.)
             :density 3
             :friction 0.3
             :restitution 0.9
             :shape shape
             ))
  ([] (create-fixture nil))
  )

(defn create-body [x y]
  (let [b (b2BodyDef.)]
    (js-set :type (.b2_dynamicBody b2Body))
    (-> (.position b) (.Set x y))
    b
    ))

(defn create [game body-def fix-def]
  (let [body (-> (:world game) (.CreateBody body-def))]
    (.CreateFixture body fix-def)
    body
    )
  )

(defn wall
  ([game width height x y] (wall game width height x y nil))
  ([game width height x y user-data]
    (let [fix-def (create-fixture (b2PolygonShape.))
          body-def (create-body x y)]
      (-> (.shape fix-def) (.SetAsBox width height))
      (js-set body-def
        :userData (name user-data)
        :type (.b2_staticBody b2Body))
      (create game body-def fix-def))
    ))


(defn build-walls [game]
  (let [w (:center-x game)
        h (:center-y game)
        dim (/ 200 scale)]
    (wall game w dim w (- dim) :ceiling)
    game
    )
  )

(defn tick [game]
  (p "tick")
  )

(defn animate-world [game]
  (let [debug-draw (b2DebugDraw.)]
    (doto debug-draw
      (.SetSprite (-> (game :canvas) (.getContext "2d")))
      (.SetDrawScale scale)
      (.SetLineThickness 1.0)
      (.SetFlags (.e_shapeBit b2DebugDraw))
      )
    (-> (game :world) (.SetDebugDraw debug-draw))
    (js/setInterval #(tick game) (/ 1000 30))
    ))

(defn init-web-app []
  (let [game (create-game (get-canvas))]
    (build-walls game)
    (animate-world game)
    ))

(jquery init-web-app)